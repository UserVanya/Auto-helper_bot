import operator
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.text import Const, Format, List, Case
from aiogram_dialog.widgets.kbd import (
    Button,
    Row,
    Column,
    ScrollingGroup,
    Select,
    Cancel,
    Back,
    Group,
    Checkbox,
    SwitchTo,
    Multiselect,
)
from aiogram_dialog.widgets.input import MessageInput, TextInput, ManagedTextInput
from aiogram_dialog.widgets.kbd import Keyboard
from aiogram.types import Message

from sqlalchemy.orm import Session
from database.models import DbTask, TaskStatus, DbUser, DbSubtask, DbEvent, DbNote, DbGoal, DbIdea, DbTag
from datetime import datetime
from aiogram.fsm.state import State, StatesGroup
from utils.logger import tasks_logger
from pprint import pprint
from aiogram.types import CallbackQuery
from aiogram_dialog.widgets.common import ManagedWidget
from magic_filter import F
import enum


class TaskMode(enum.Enum):
    EDIT = "–†–µ–∂–∏–º: ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    CHANGE_STATUS = "–†–µ–∂–∏–º: üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"


class SubtaskMode(enum.Enum):
    EDIT = "–†–µ–∂–∏–º: ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    CHANGE_STATUS = "–†–µ–∂–∏–º: üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"


def get_task_text(task: DbTask) -> str:
    """
    Format("üîπ {current_task.name}"),
    Format("üìù –û–ø–∏—Å–∞–Ω–∏–µ: {current_task.description}"),
    Format("üîç –°—Ç–∞—Ç—É—Å: {current_task.status.value}"),
    Const("üß© –ü–æ–¥–∑–∞–¥–∞—á–∏:", when="has_subtasks"),
    List(
        field= Format("‚Ä¢ {item}"),
        items="text_for_subtasks"
    ),
    Format("üïí –°—Ä–æ–∫: {current_task.deadline}"),
    Format("üè∑Ô∏è –¢–µ–≥–∏: {current_task.tag}"),
    """
    text = f"üîπ {task.name}\n"
    if task.description:
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
    text += f"üîç –°—Ç–∞—Ç—É—Å: {task.status.value}\n"
    if task.deadline:
        text += f"üïí –°—Ä–æ–∫: {task.deadline}\n"
    if task.tags:
        text += f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join([tag.name for tag in task.tags])}\n"
    if task.subtasks and len(task.subtasks) > 0:
        text += f"üß© –ü–æ–¥–∑–∞–¥–∞—á–∏:\n"
        for subtask in task.subtasks:
            text += f"‚Ä¢ {subtask.name} {'‚úÖ' if subtask.is_done else '‚¨ú'}\n"
    # Connected events, notes, goals, ideas
    if task.events and len(task.events) > 0:
        events_text = "\n".join([f"‚Ä¢ {event.name}" for event in task.events])
        text += f"üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è üìÖ:\n {events_text}\n"
    if task.notes and len(task.notes) > 0:
        notes_text = "\n".join([f"‚Ä¢ {note.name}" for note in task.notes])
        text += (
            f"üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ üóíÔ∏è:\n {notes_text}\n"
        )
    if task.goals and len(task.goals) > 0:
        goals_text = "\n".join([f"‚Ä¢ {goal.name}" for goal in task.goals])
        text += (
            f"üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ üéØ:\n {goals_text}\n"
        )
    if task.ideas and len(task.ideas) > 0:
        ideas_text = "\n".join([f"‚Ä¢ {idea.name}" for idea in task.ideas])
        text += (
            f"üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ üí°:\n {ideas_text}\n"
        )
    return text


# States
class TasksStates(StatesGroup):
    TASKS_LIST = State()
    TASK_DETAILS = State()
    ADD_TASK = State()
    CHANGE_NAME = State()
    CHANGE_DESCRIPTION = State()
    CHANGE_DEADLINE = State()
    CHANGE_STATUS = State()
    CHANGE_TAGS = State()
    CHANGE_EVENTS = State()
    CHANGE_NOTES = State()
    CHANGE_GOALS = State()
    CHANGE_IDEAS = State()

    ADD_SUBTASK = State()

    DELETE_TASK = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
    SUBTASKS_LIST = State()
    SUBTASK_DETAILS = State()
    CHANGE_SUBTASK_NAME = State()
    DELETE_SUBTASK = State()


# Data getters
async def get_tasks_data(dialog_manager: DialogManager, **kwargs) -> dict:
    db_session: Session = kwargs["db_session"]
    db_user: DbUser = kwargs["db_user"]
    tasks = (
        db_session.query(DbTask)
        .filter(DbTask.user_id == db_user.id, DbTask.is_deleted == False)
        .order_by(DbTask.id.desc())
        .all()
    )
    dialog_manager.dialog_data["mode"] = dialog_manager.dialog_data.get(
        "mode", TaskMode.CHANGE_STATUS.value
    )
    tasks_logger.info(f"Retrieved {len(tasks)} tasks for user {db_user.tg_id}")
    return {
        "tasks": tasks,
        "mode": dialog_manager.dialog_data.get("mode", TaskMode.CHANGE_STATUS.value),
    }





async def get_current_task_data(dialog_manager: DialogManager, **kwargs) -> dict:
    db_session: Session = kwargs["db_session"]
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    if not task_id:
        tasks_logger.warning("No selected_task_id in dialog_data")
        return {"current_task": None}
    task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    if not task:
        tasks_logger.warning(f"Task with id {task_id} not found")
        return {"current_task": None}
    tasks_logger.info(f"Retrieved task {task_id} for details window")
    return {
        "current_task": task,
        "has_subtasks": len(task.subtasks) > 0,
        "task_text": get_task_text(task),
    }


async def get_events_data(dialog_manager: DialogManager, **kwargs) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    db_session: Session = kwargs["db_session"]
    db_user: DbUser = kwargs["db_user"]
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_events = (
        db_session.query(DbEvent)
        .filter(DbEvent.user_id == db_user.id, DbEvent.is_deleted == False)
        .order_by(DbEvent.id)
        .all()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    selected_event_ids = [event.id for event in current_task.events] if current_task else []
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ multiselect
    if not dialog_manager.dialog_data.get("events_checked_set"):
        events_widget = dialog_manager.dialog().find("select_events")
        if events_widget:
            for event_id in selected_event_ids:
                events_widget.set_checked(dialog_manager, str(event_id), True)
        dialog_manager.dialog_data["events_checked_set"] = True
    
    return {
        "all_events": all_events,
        "selected_event_ids": selected_event_ids,
        "current_task": current_task,
    }


async def get_notes_data(dialog_manager: DialogManager, **kwargs) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏"""
    db_session: Session = kwargs["db_session"]
    db_user: DbUser = kwargs["db_user"]
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_notes = (
        db_session.query(DbNote)
        .filter(DbNote.user_id == db_user.id, DbNote.is_deleted == False)
        .order_by(DbNote.id)
        .all()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    selected_note_ids = [note.id for note in current_task.notes] if current_task else []
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ multiselect
    if not dialog_manager.dialog_data.get("notes_checked_set"):
        notes_widget = dialog_manager.dialog().find("select_notes")
        if notes_widget:
            for note_id in selected_note_ids:
                notes_widget.set_checked(dialog_manager, str(note_id), True)
        dialog_manager.dialog_data["notes_checked_set"] = True
    
    return {
        "all_notes": all_notes,
        "selected_note_ids": selected_note_ids,
        "current_task": current_task,
    }


async def get_goals_data(dialog_manager: DialogManager, **kwargs) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏"""
    db_session: Session = kwargs["db_session"]
    db_user: DbUser = kwargs["db_user"]
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_goals = (
        db_session.query(DbGoal)
        .filter(DbGoal.user_id == db_user.id, DbGoal.is_deleted == False)
        .order_by(DbGoal.id)
        .all()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    selected_goal_ids = [goal.id for goal in current_task.goals] if current_task else []
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ multiselect
    if not dialog_manager.dialog_data.get("goals_checked_set"):
        goals_widget = dialog_manager.dialog().find("select_goals")
        if goals_widget:
            for goal_id in selected_goal_ids:
                goals_widget.set_checked(dialog_manager, str(goal_id), True)
        dialog_manager.dialog_data["goals_checked_set"] = True
    
    return {
        "all_goals": all_goals,
        "selected_goal_ids": selected_goal_ids,
        "current_task": current_task,
    }


async def get_ideas_data(dialog_manager: DialogManager, **kwargs) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∏–¥–µ—è–º–∏"""
    db_session: Session = kwargs["db_session"]
    db_user: DbUser = kwargs["db_user"]
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–¥–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_ideas = (
        db_session.query(DbIdea)
        .filter(DbIdea.user_id == db_user.id, DbIdea.is_deleted == False)
        .order_by(DbIdea.id)
        .all()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–¥–µ–π
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    selected_idea_ids = [idea.id for idea in current_task.ideas] if current_task else []
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ multiselect
    if not dialog_manager.dialog_data.get("ideas_checked_set"):
        ideas_widget = dialog_manager.dialog().find("select_ideas")
        if ideas_widget:
            for idea_id in selected_idea_ids:
                ideas_widget.set_checked(dialog_manager, str(idea_id), True)
        dialog_manager.dialog_data["ideas_checked_set"] = True
    
    return {
        "all_ideas": all_ideas,
        "selected_idea_ids": selected_idea_ids,
        "current_task": current_task,
    }


async def get_tags_data(dialog_manager: DialogManager, **kwargs) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏"""
    db_session: Session = kwargs["db_session"]
    db_user: DbUser = kwargs["db_user"]
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_tags = (
        db_session.query(DbTag)
        .filter(DbTag.user_id == db_user.id, DbTag.is_deleted == False)
        .order_by(DbTag.id)
        .all()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    selected_tag_ids = [tag.id for tag in current_task.tags] if current_task else []
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ multiselect
    if not dialog_manager.dialog_data.get("tags_checked_set"):
        tags_widget = dialog_manager.dialog().find("select_tags")
        if tags_widget:
            for tag_id in selected_tag_ids:
                tags_widget.set_checked(dialog_manager, str(tag_id), True)
        dialog_manager.dialog_data["tags_checked_set"] = True
    
    return {
        "all_tags": all_tags,
        "selected_tag_ids": selected_tag_ids,
        "current_task": current_task,
    }





async def get_subtasks_list_data(dialog_manager: DialogManager, **kwargs) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∑–∞–¥–∞—á —Å —Ä–µ–∂–∏–º–∞–º–∏"""
    db_session: Session = kwargs["db_session"]
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    if not current_task:
        return {"current_task": None, "subtasks": [], "mode": SubtaskMode.CHANGE_STATUS.value}
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ (–Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
    subtasks = (
        db_session.query(DbSubtask)
        .filter(DbSubtask.task_id == task_id, DbSubtask.is_deleted == False)
        .order_by(DbSubtask.id)
        .all()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    dialog_manager.dialog_data["subtask_mode"] = dialog_manager.dialog_data.get(
        "subtask_mode", SubtaskMode.CHANGE_STATUS.value
    )
    subtasks_info = [
        {
            "id": item.id,
            "info": f"{'‚úÖ' if item.is_done else '‚¨ú'} {item.name}",
        }
        for item in subtasks
    ]
    print(subtasks_info)
    tasks_logger.info(f"Retrieved {len(subtasks)} subtasks for task {task_id}")
    return {
        "current_task": current_task,
        "subtasks_info": subtasks_info,
        "mode": dialog_manager.dialog_data.get("subtask_mode", SubtaskMode.CHANGE_STATUS.value),
    }


async def get_current_subtask_data(dialog_manager: DialogManager, **kwargs) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π –ø–æ–¥–∑–∞–¥–∞—á–∏"""
    db_session: Session = kwargs["db_session"]
    subtask_id = dialog_manager.dialog_data.get("selected_subtask_id")
    task_id = dialog_manager.dialog_data.get("selected_task_id")
    
    if not subtask_id:
        tasks_logger.warning("No selected_subtask_id in dialog_data")
        return {"current_subtask": None, "current_task": None}
    
    subtask = db_session.query(DbSubtask).filter(DbSubtask.id == subtask_id).first()
    if not subtask:
        tasks_logger.warning(f"Subtask with id {subtask_id} not found")
        return {"current_subtask": None, "current_task": None}
    
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    
    tasks_logger.info(f"Retrieved subtask {subtask_id} for details window")
    return {
        "current_subtask": subtask,
        "current_task": current_task,
        "done_info": f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if subtask.is_done else f"‚¨ú –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
    }


async def on_task_selected(
    callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager, item_id: int
) -> None:
    manager.dialog_data["selected_task_id"] = item_id
    tasks_logger.info(f"Task selected: {item_id}")
    db_session: Session = manager.middleware_data["db_session"]
    if manager.dialog_data["mode"] == TaskMode.CHANGE_STATUS.value:
        db_current_task = db_session.query(DbTask).filter(DbTask.id == item_id).first()
        db_current_task.status = TaskStatus(db_current_task.status).next()
        db_session.commit()
        await callback.answer(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {db_current_task.status.value}")
    else:
        await manager.switch_to(TasksStates.TASK_DETAILS)


async def on_subtask_selected(
    callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager, item_id: int
) -> None:
    manager.dialog_data["selected_subtask_id"] = item_id
    tasks_logger.info(f"Subtask selected: {item_id}")
    db_session: Session = manager.middleware_data["db_session"]
    if manager.dialog_data["subtask_mode"] == SubtaskMode.CHANGE_STATUS.value:
        db_current_subtask = db_session.query(DbSubtask).filter(DbSubtask.id == item_id).first()
        db_current_subtask.is_done = not db_current_subtask.is_done
        db_session.commit()
        status_text = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" if db_current_subtask.is_done else "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        await callback.answer(f"–ü–æ–¥–∑–∞–¥–∞—á–∞ —Ç–µ–ø–µ—Ä—å {status_text}")
    else:
        await manager.switch_to(TasksStates.SUBTASK_DETAILS)


async def on_add_task(
    callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager
) -> None:
    tasks_logger.info("Add task button clicked")
    await manager.switch_to(TasksStates.ADD_TASK)


async def on_task_mode_select(
    callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager
) -> None:
    manager.dialog_data["mode"] = (
        TaskMode.CHANGE_STATUS.value
        if manager.dialog_data["mode"] == TaskMode.EDIT.value
        else TaskMode.EDIT.value
    )
    tasks_logger.info(f"Task mode select button clicked: {manager.dialog_data['mode']}")


async def on_subtask_mode_select(
    callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager
) -> None:
    manager.dialog_data["subtask_mode"] = (
        SubtaskMode.CHANGE_STATUS.value
        if manager.dialog_data["subtask_mode"] == SubtaskMode.EDIT.value
        else SubtaskMode.EDIT.value
    )
    tasks_logger.info(f"Subtask mode select button clicked: {manager.dialog_data['subtask_mode']}")


# --- NAME ---
async def on_change_task_name_success(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:
    tasks_logger.info(f"Task name changed: {message.text}")
    db_session: Session = dialog_manager.middleware_data["db_session"]
    task_id = dialog_manager.dialog_data["selected_task_id"]
    db_current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    db_current_task.name = text
    db_session.commit()
    await dialog_manager.switch_to(TasksStates.TASK_DETAILS)


async def on_change_task_name_error(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
) -> None:
    tasks_logger.error(f"Error changing task name: {message.text}")
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")


def on_change_task_name_type_factory(text: str) -> str:
    if len(text) > 50:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
    return text


# --- DESCRIPTION ---
async def on_change_task_description_success(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:
    tasks_logger.info(f"Task description changed: {message.text}")
    db_session: Session = dialog_manager.middleware_data["db_session"]
    task_id = dialog_manager.dialog_data["selected_task_id"]
    db_current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    db_current_task.description = text
    db_session.commit()
    await dialog_manager.switch_to(TasksStates.TASK_DETAILS)


async def on_change_task_description_error(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
) -> None:
    tasks_logger.error(f"Error changing task description: {message.text}")
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤")


def on_change_task_description_type_factory(text: str) -> str:
    if len(text) > 500:
        raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤")
    return text


# --- DEADLINE ---
async def on_change_task_deadline_success(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, deadline: datetime
) -> None:
    tasks_logger.info(f"Task deadline changed: {message.text}")
    db_session: Session = dialog_manager.middleware_data["db_session"]
    task_id = dialog_manager.dialog_data["selected_task_id"]
    db_current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    db_current_task.deadline = deadline
    db_session.commit()
    await dialog_manager.switch_to(TasksStates.TASK_DETAILS)


async def on_change_task_deadline_error(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
) -> None:
    tasks_logger.error(f"Error changing task deadline: {message.text}")
    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:CC")


def on_change_task_deadline_type_factory(text: str) -> str:
    try:
        val = datetime.strptime(text, "%Y-%m-%d %H:%M:%S")
        return val
    except Exception as e:
        tasks_logger.error(f"Invalid deadline format: {text}, {e}")
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:CC")
    

# --- STATUS ---
async def on_change_task_status_success(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:
    tasks_logger.info(f"Task status changed: {message.text}")
    db_session: Session = dialog_manager.middleware_data["db_session"]
    task_id = dialog_manager.dialog_data["selected_task_id"]
    db_current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ TaskStatus
    status_map = {s.value: s for s in TaskStatus}
    if text not in status_map:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑: "
            + ", ".join([s.value for s in TaskStatus])
        )
        return
    db_current_task.status = status_map[text]
    db_session.commit()
    await dialog_manager.switch_to(TasksStates.TASK_DETAILS)


async def on_change_task_status_error(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
) -> None:
    tasks_logger.error(f"Error changing task status: {message.text}")
    await message.answer(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑: "
        + ", ".join([s.value for s in TaskStatus])
    )


def on_change_task_status_type_factory(text: str) -> str:
    if text not in [s.value for s in TaskStatus]:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    return text


async def change_task_status(
    callback: CallbackQuery, widget: Select, manager: DialogManager, item_id: str
) -> None:
    """
    Handler for changing the status of a task via Select widget.
    item_id: TaskStatus.name (str)
    """
    db_session: Session = manager.middleware_data["db_session"]
    task_id = manager.dialog_data["selected_task_id"]
    db_current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    if not db_current_task:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ", show_alert=True)
        return
    new_status = TaskStatus[item_id]
    tasks_logger.info(f"Changing task status to: {new_status}")
    db_current_task.status = new_status
    db_session.commit()
    await manager.switch_to(TasksStates.TASK_DETAILS)
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ multiselect –≤–∏–¥–∂–µ—Ç–æ–≤
async def on_events_selection_changed(
    callback: CallbackQuery, widget: Multiselect, manager: DialogManager, *_
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π"""
    db_session: Session = manager.middleware_data["db_session"]
    task_id = manager.dialog_data["selected_task_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    if not current_task:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    selected_event_ids = widget.get_checked()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏
    current_task.events.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
    if selected_event_ids:
        selected_events = (
            db_session.query(DbEvent)
            .filter(DbEvent.id.in_(selected_event_ids))
            .all()
        )
        current_task.events.extend(selected_events)
    
    db_session.commit()
    tasks_logger.info(f"Updated events for task {task_id}: {selected_event_ids}")
    await callback.answer("–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


async def on_notes_selection_changed(
    callback: CallbackQuery, widget: Multiselect, manager: DialogManager, *_
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫"""
    db_session: Session = manager.middleware_data["db_session"]
    task_id = manager.dialog_data["selected_task_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    if not current_task:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    selected_note_ids = widget.get_checked()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏
    current_task.notes.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
    if selected_note_ids:
        selected_notes = (
            db_session.query(DbNote)
            .filter(DbNote.id.in_(selected_note_ids))
            .all()
        )
        current_task.notes.extend(selected_notes)
    
    db_session.commit()
    tasks_logger.info(f"Updated notes for task {task_id}: {selected_note_ids}")
    await callback.answer("–°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


async def on_goals_selection_changed(
    callback: CallbackQuery, widget: Multiselect, manager: DialogManager, *_
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π"""
    db_session: Session = manager.middleware_data["db_session"]
    task_id = manager.dialog_data["selected_task_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    if not current_task:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏
    selected_goal_ids = widget.get_checked()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏
    current_task.goals.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
    if selected_goal_ids:
        selected_goals = (
            db_session.query(DbGoal)
            .filter(DbGoal.id.in_(selected_goal_ids))
            .all()
        )
        current_task.goals.extend(selected_goals)
    
    db_session.commit()
    tasks_logger.info(f"Updated goals for task {task_id}: {selected_goal_ids}")
    await callback.answer("–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


async def on_ideas_selection_changed(
    callback: CallbackQuery, widget: Multiselect, manager: DialogManager, *_
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–¥–µ–π"""
    db_session: Session = manager.middleware_data["db_session"]
    task_id = manager.dialog_data["selected_task_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    if not current_task:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–¥–µ–∏
    selected_idea_ids = widget.get_checked()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏
    current_task.ideas.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
    if selected_idea_ids:
        selected_ideas = (
            db_session.query(DbIdea)
            .filter(DbIdea.id.in_(selected_idea_ids))
            .all()
        )
        current_task.ideas.extend(selected_ideas)
    
    db_session.commit()
    tasks_logger.info(f"Updated ideas for task {task_id}: {selected_idea_ids}")
    await callback.answer("–°–≤—è–∑–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


async def on_tags_selection_changed(
    callback: CallbackQuery, widget: Multiselect, manager: DialogManager, *_
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤"""
    db_session: Session = manager.middleware_data["db_session"]
    task_id = manager.dialog_data["selected_task_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    current_task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    if not current_task:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
    selected_tag_ids = widget.get_checked()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏
    current_task.tags.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
    if selected_tag_ids:
        selected_tags = (
            db_session.query(DbTag)
            .filter(DbTag.id.in_(selected_tag_ids))
            .all()
        )
        current_task.tags.extend(selected_tags)
    
    db_session.commit()
    tasks_logger.info(f"Updated tags for task {task_id}: {selected_tag_ids}")
    await callback.answer("–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


async def on_add_subtask_button(
    callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager
) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏"""
    await manager.switch_to(TasksStates.ADD_SUBTASK)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø–æ–¥–∑–∞–¥–∞—á
async def on_add_subtask_success(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:
    """–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏"""
    db_session: Session = dialog_manager.middleware_data["db_session"]
    task_id = dialog_manager.dialog_data["selected_task_id"]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–∑–∞–¥–∞—á—É
    new_subtask = DbSubtask(
        name=text,
        task_id=task_id,
        is_done=False,
        is_deleted=False
    )
    
    db_session.add(new_subtask)
    db_session.commit()
    
    tasks_logger.info(f"Added new subtask: {text} for task {task_id}")
    await dialog_manager.switch_to(TasksStates.SUBTASKS_LIST)


async def on_add_subtask_error(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
) -> None:
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏"""
    tasks_logger.error(f"Error adding subtask: {message.text}")
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")


def on_add_subtask_type_factory(text: str) -> str:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏"""
    if len(text) > 100:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    return text


# --- SUBTASK NAME ---
async def on_change_subtask_name_success(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
) -> None:
    tasks_logger.info(f"Subtask name changed: {message.text}")
    db_session: Session = dialog_manager.middleware_data["db_session"]
    subtask_id = dialog_manager.dialog_data["selected_subtask_id"]
    db_current_subtask = db_session.query(DbSubtask).filter(DbSubtask.id == subtask_id).first()
    db_current_subtask.name = text
    db_session.commit()
    await dialog_manager.switch_to(TasksStates.SUBTASK_DETAILS)


async def on_change_subtask_name_error(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
) -> None:
    tasks_logger.error(f"Error changing subtask name: {message.text}")
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")


def on_change_subtask_name_type_factory(text: str) -> str:
    if len(text) > 100:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    return text





# --- SUBTASK STATUS TOGGLE ---
async def on_subtask_status_toggle(
    callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager
) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏"""
    db_session: Session = manager.middleware_data["db_session"]
    subtask_id = manager.dialog_data["selected_subtask_id"]
    
    subtask = db_session.query(DbSubtask).filter(DbSubtask.id == subtask_id).first()
    if not subtask:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    subtask.is_done = not subtask.is_done
    db_session.commit()
    
    status_text = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" if subtask.is_done else "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    tasks_logger.info(f"Toggled subtask {subtask_id} status to {subtask.is_done}")
    await callback.answer(f"–ü–æ–¥–∑–∞–¥–∞—á–∞ —Ç–µ–ø–µ—Ä—å {status_text}")


# --- SUBTASK DELETE ---
async def on_delete_subtask_confirm(
    callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager
) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏"""
    db_session: Session = manager.middleware_data["db_session"]
    subtask_id = manager.dialog_data["selected_subtask_id"]
    
    subtask = db_session.query(DbSubtask).filter(DbSubtask.id == subtask_id).first()
    if not subtask:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    subtask.is_deleted = True
    db_session.commit()
    
    tasks_logger.info(f"Deleted subtask {subtask_id}")
    await manager.switch_to(TasksStates.SUBTASKS_LIST)
    await callback.answer("–ü–æ–¥–∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def on_delete_task_confirm(
    callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager
) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    db_session: Session = manager.middleware_data["db_session"]
    task_id = manager.dialog_data["selected_task_id"]
    
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
    task = db_session.query(DbTask).filter(DbTask.id == task_id).first()
    if not task:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    task.is_deleted = True
    db_session.commit()
    
    tasks_logger.info(f"Deleted task {task_id}")
    await manager.switch_to(TasksStates.TASKS_LIST)
    await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")


tasks_dialog = Dialog(
    Window(
        Const("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:"),
        ScrollingGroup(
            Row(
                Select(
                    Format("{item.status.value} {item.name}"),
                    id="select_task",
                    item_id_getter=lambda x: x.id,
                    items="tasks",
                    on_click=on_task_selected,
                    when="tasks",
                )
            ),
            hide_on_single_page=True,
            id="scroll_tasks",
            height=8,
            width=1,
        ),
        Button(Format("{mode}"), id="select_task_mode", on_click=on_task_mode_select),
        Button(Const("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), id="add_task", on_click=on_add_task),
        Cancel(Const("üîô –ó–∞–∫—Ä—ã—Ç—å")),
        state=TasksStates.TASKS_LIST,
        getter=get_tasks_data,
    ),
    Window(
        Format("{task_text}"),
        Group(
            SwitchTo(
                Const("‚úèÔ∏è –ò–º—è"), id="change_task_name", state=TasksStates.CHANGE_NAME
            ),
            SwitchTo(
                Const("üìù –û–ø–∏—Å–∞–Ω–∏–µ"),
                id="change_task_description",
                state=TasksStates.CHANGE_DESCRIPTION,
            ),
            SwitchTo(
                Const("‚è∞ –°—Ä–æ–∫"),
                id="change_task_deadline",
                state=TasksStates.CHANGE_DEADLINE,
            ),
            SwitchTo(
                Const("üè∑Ô∏è –¢–µ–≥–∏"), id="change_task_tags", state=TasksStates.CHANGE_TAGS
            ),
            SwitchTo(
                Const("üîÑ –°—Ç–∞—Ç—É—Å"),
                id="change_task_status",
                state=TasksStates.CHANGE_STATUS,
            ),
            SwitchTo(
                Const("üîó C–æ–±—ã—Ç–∏—è üìÖ"),
                id="change_task_events",
                state=TasksStates.CHANGE_EVENTS,
            ),
            SwitchTo(
                Const("üîó –ó–∞–º–µ—Ç–∫–∏ üóíÔ∏è"),
                id="change_task_notes",
                state=TasksStates.CHANGE_NOTES,
            ),
            SwitchTo(
                Const("üîó –¶–µ–ª–∏ üéØ"),
                id="change_task_goals",
                state=TasksStates.CHANGE_GOALS,
            ),
            SwitchTo(
                Const("üîó –ò–¥–µ–∏ üí°"),
                id="change_task_ideas",
                state=TasksStates.CHANGE_IDEAS,
            ),
            SwitchTo(
                Const("üß© –ü–æ–¥–∑–∞–¥–∞—á–∏"),
                id="manage_subtasks",
                state=TasksStates.SUBTASKS_LIST,
            ),
            SwitchTo(
                Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), id="delete_task", state=TasksStates.DELETE_TASK
            ),
            width=2,
        ),
        Back(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_tasks"),
        state=TasksStates.TASK_DETAILS,
        getter=get_current_task_data,
    ),
    # --- NAME ---
    Window(
        Const("‚úèÔ∏è –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"),
        Format("üè∑Ô∏è –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {current_task.name}"),
        Const("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤"),
        Const("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"),
        TextInput(
            id="change_task_name_input",
            type_factory=on_change_task_name_type_factory,
            on_success=on_change_task_name_success,
            on_error=on_change_task_name_error,
        ),
        Back(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details"),
        state=TasksStates.CHANGE_NAME,
        getter=get_current_task_data,
    ),
    # --- DESCRIPTION ---
    Window(
        Const("üìù –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"),
        Format("üìù –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {current_task.description}"),
        Const("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤"),
        Const("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"),
        TextInput(
            id="change_task_description_input",
            type_factory=on_change_task_description_type_factory,
            on_success=on_change_task_description_success,
            on_error=on_change_task_description_error,
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details_from_description", state=TasksStates.TASK_DETAILS),
        state=TasksStates.CHANGE_DESCRIPTION,
        getter=get_current_task_data,
    ),
    # --- DEADLINE ---
    Window(
        Const("‚è∞ –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏"),
        Format("üïí –¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫: {current_task.deadline}"),
        Const("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú"),
        Const("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏:"),
        TextInput(
            id="change_task_deadline_input",
            type_factory=on_change_task_deadline_type_factory,
            on_success=on_change_task_deadline_success,
            on_error=on_change_task_deadline_error,
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details_from_deadline", state=TasksStates.TASK_DETAILS),
        state=TasksStates.CHANGE_DEADLINE,
        getter=get_current_task_data,
    ),
    # --- STATUS ---
    Window(
        Const("üîÑ –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"),
        Format("üîç –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_task.status.value}"),
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"),
        Select(
            Format("{item.value}"),
            id="select_task_status",
            item_id_getter=lambda status: status.name,
            items=list(TaskStatus),
            on_click=change_task_status,
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details_from_status", state=TasksStates.TASK_DETAILS),
        state=TasksStates.CHANGE_STATUS,
        getter=get_current_task_data,
    ),
    # --- EVENTS ---
    Window(
        Const("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏"),
        Format("üìÖ –ó–∞–¥–∞—á–∞: {current_task.name}"),
        Const("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π:"),
        ScrollingGroup(
            Multiselect(
                Format("‚òëÔ∏è {item.name}"),
                Format("‚òê {item.name}"),
                id="task_select_events",
                item_id_getter=lambda event: event.id,
                items="all_events",
                on_state_changed=on_events_selection_changed,
            ),
            id="task_events_scroll",
            width=1,
            height=8,
            when="all_events",
        ),
        Const("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π", when=~F["all_events"]),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details_from_events", state=TasksStates.TASK_DETAILS),
        state=TasksStates.CHANGE_EVENTS,
        getter=get_events_data,
    ),
    # --- NOTES ---
    Window(
        Const("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏"),
        Format("üóíÔ∏è –ó–∞–¥–∞—á–∞: {current_task.name}"),
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π:"),
        ScrollingGroup(
            Multiselect(
                Format("‚òëÔ∏è {item.name}"),
                Format("‚òê {item.name}"),
                id="select_notes",
                item_id_getter=lambda note: note.id,
                items="all_notes",
                on_state_changed=on_notes_selection_changed,
            ),
            id="notes_scroll",
            width=1,
            height=8,
            when="all_notes",
        ),
        Const("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫", when=~F["all_notes"]),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details_from_notes", state=TasksStates.TASK_DETAILS),
        state=TasksStates.CHANGE_NOTES,
        getter=get_notes_data,
    ),
    # --- GOALS ---
    Window(
        Const("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏"),
        Format("üéØ –ó–∞–¥–∞—á–∞: {current_task.name}"),
        Const("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π:"),
        ScrollingGroup(
            Multiselect(
                Format("‚òëÔ∏è {item.name}"),
                Format("‚òê {item.name}"),
                id="select_goals",
                item_id_getter=lambda goal: goal.id,
                items="all_goals",
                on_state_changed=on_goals_selection_changed,
            ),
            id="goals_scroll",
            width=1,
            height=8,
            when="all_goals",
        ),
        Const("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π", when=~F["all_goals"]),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details_from_goals", state=TasksStates.TASK_DETAILS),
        state=TasksStates.CHANGE_GOALS,
        getter=get_goals_data,
    ),
    # --- IDEAS ---
    Window(
        Const("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∏–¥–µ—è–º–∏"),
        Format("üí° –ó–∞–¥–∞—á–∞: {current_task.name}"),
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π:"),
        ScrollingGroup(
            Multiselect(
                Format("‚òëÔ∏è {item.name}"),
                Format("‚òê {item.name}"),
                id="select_ideas",
                item_id_getter=lambda idea: idea.id,
                items="all_ideas",
                on_state_changed=on_ideas_selection_changed,
            ),
            id="ideas_scroll",
            width=1,
            height=8,
            when="all_ideas",
        ),
        Const("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–¥–µ–π", when=~F["all_ideas"]),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details_from_ideas", state=TasksStates.TASK_DETAILS),
        state=TasksStates.CHANGE_IDEAS,
        getter=get_ideas_data,
    ),
    # --- TAGS (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è multiselect) ---
    Window(
        Const("üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏"),
        Format("üè∑Ô∏è –ó–∞–¥–∞—á–∞: {current_task.name}"),
        Const("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π:"),
        ScrollingGroup(
            Multiselect(
                Format("‚òëÔ∏è {item.name}"),
                Format("‚òê {item.name}"),
                id="select_tags",
                item_id_getter=lambda tag: tag.id,
                items="all_tags",
                on_state_changed=on_tags_selection_changed,
            ),
            id="tags_scroll",
            width=1,
            height=8,
            when="all_tags",
        ),
        Const("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤", when=~F["all_tags"]),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details_from_tags", state=TasksStates.TASK_DETAILS),
        state=TasksStates.CHANGE_TAGS,
        getter=get_tags_data,
    ),
    # --- SUBTASKS LIST ---
    Window(
        Const("üß© –ü–æ–¥–∑–∞–¥–∞—á–∏ –∑–∞–¥–∞—á–∏:"),
        Format("üìã –ó–∞–¥–∞—á–∞: {current_task.name}"),
        ScrollingGroup(
            Select(
                Format("{item[info]}"),
                id="select_subtask",
                item_id_getter=lambda x: x["id"],
                items="subtasks_info",
                on_click=on_subtask_selected,
            ),
            #hide_on_single_page=True,
            id="scroll_subtasks",
            height=8,
            width=1,
        ),
        Button(Format("{mode}"), id="select_subtask_mode", on_click=on_subtask_mode_select),
        Button(Const("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É"), id="add_subtask", on_click=on_add_subtask_button),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_task_details_from_subtasks", state=TasksStates.TASK_DETAILS),
        state=TasksStates.SUBTASKS_LIST,
        getter=get_subtasks_list_data,
    ),
    # --- SUBTASK DETAILS ---
    Window(
        Format("üîπ {current_subtask.name}"),
        Format("üìù –°—Ç–∞—Ç—É—Å: {done_info}"),
        Group(
            SwitchTo(
                Const("‚úèÔ∏è –ò–º—è"), id="change_subtask_name", state=TasksStates.CHANGE_SUBTASK_NAME
            ),
            Button(
                Const("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
                id="toggle_subtask_status",
                on_click=on_subtask_status_toggle,
            ),
            SwitchTo(
                Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"), id="delete_subtask", state=TasksStates.DELETE_SUBTASK
            ),
            width=2,
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_subtasks", state=TasksStates.SUBTASKS_LIST),
        state=TasksStates.SUBTASK_DETAILS,
        getter=get_current_subtask_data,
    ),
    # --- ADD SUBTASK ---
    Window(
        Const("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏"),
        Format("üìã –ó–∞–¥–∞—á–∞: {current_task.name}"),
        Const("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤"),
        Const("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏:"),
        TextInput(
            id="add_subtask_input",
            type_factory=on_add_subtask_type_factory,
            on_success=on_add_subtask_success,
            on_error=on_add_subtask_error,
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_subtasks_from_add_subtask", state=TasksStates.SUBTASKS_LIST),
        state=TasksStates.ADD_SUBTASK,
        getter=get_current_task_data,
    ),
    # --- CHANGE SUBTASK NAME ---
    Window(
        Const("‚úèÔ∏è –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏"),
        Format("üè∑Ô∏è –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {current_subtask.name}"),
        Const("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤"),
        Const("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏:"),
        TextInput(
            id="change_subtask_name_input",
            type_factory=on_change_subtask_name_type_factory,
            on_success=on_change_subtask_name_success,
            on_error=on_change_subtask_name_error,
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_to_subtask_details", state=TasksStates.SUBTASK_DETAILS),
        state=TasksStates.CHANGE_SUBTASK_NAME,
        getter=get_current_subtask_data,
    ),

    # --- DELETE SUBTASK ---
    Window(
        Const("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏"),
        Format("‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É:\nüîπ {current_subtask.name}"),
        Const("‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"),
        Group(
            Button(
                Const("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"),
                id="confirm_delete_subtask",
                on_click=on_delete_subtask_confirm,
            ),
            SwitchTo(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel_delete_subtask", state=TasksStates.SUBTASK_DETAILS),
            width=2,
        ),
        state=TasksStates.DELETE_SUBTASK,
        getter=get_current_subtask_data,
    ),
    # --- DELETE TASK ---
    Window(
        Const("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"),
        Format("‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É:\nüîπ {current_task.name}"),
        Const("‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"),
        Group(
            Button(
                Const("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"),
                id="confirm_delete",
                on_click=on_delete_task_confirm,
            ),
            SwitchTo(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel_delete", state=TasksStates.TASK_DETAILS),
            width=2,
        ),
        state=TasksStates.DELETE_TASK,
        getter=get_current_task_data,
    ),
)
