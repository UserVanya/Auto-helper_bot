
from aiogram import types, Router
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram import F
from sqlalchemy.orm import Session
from utils.voice_transcriber import transcribe_audio_message
from utils.llm_connector import send_prompt_to_llm
from aiogram.utils.text_decorations import html_decoration
import html
from services import executor, validator
from database.models import DbUser
from models.answers import AnswerModel
from utils.logger import voice_logger

voice_router = Router(name="VoiceCommandsHandler")

def get_action_result_text(is_valid: bool, errors: list, answer: AnswerModel, added_items: list, updated_items: list, deleted_items: list) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥. 
    """
    if is_valid and answer.response:
        reply_parts = []
        if added_items:
            reply_parts.append(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ({len(added_items)} –æ–±—ä–µ–∫—Ç–æ–≤):")
            for item in added_items:
                reply_parts.append(f"  ‚Ä¢ {item['type']}: {item['name']}")
        if updated_items:
            reply_parts.append(f"üìù –ò–∑–º–µ–Ω–µ–Ω–æ ({len(updated_items)} –æ–±—ä–µ–∫—Ç–æ–≤):")
            for item in updated_items:
                reply_parts.append(f"  ‚Ä¢ {item['type']}: {item['name']}")
        if deleted_items:
            reply_parts.append(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ({len(deleted_items)} –æ–±—ä–µ–∫—Ç–æ–≤):")
            for item in deleted_items:
                reply_parts.append(f"  ‚Ä¢ {item['type']}: {item['name']}")
        
        if reply_parts:
            return f"ü§ñ –ö–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:\n\n{chr(10).join(reply_parts)}"
    else:
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        error_text = "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        if errors:
            error_text += '\n'.join(errors)
        if answer and answer.error:
            error_text += f"\n\n–û—à–∏–±–∫–∞ LLM: {answer.error}"
        return error_text
    
    

@voice_router.message(F.voice)
async def handle_voice_message(message: types.Message, db_session: Session, db_user: DbUser):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç, 
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ LLM, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    voice_logger.info(f"Received voice message from user {db_user.tg_id} ({db_user.name})")
    
    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    voice_logger.debug("Starting voice transcription...")
    text = await transcribe_audio_message(message)
    voice_logger.info(f"Transcribed text: {text[:100]}...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(f"ü§ñ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n\n{text}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    voice_logger.debug("Sending to LLM...")
    text_answer = send_prompt_to_llm(text, db_session, db_user.tg_id)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM, —á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –º–æ–¥–µ–ª–∏ AnswerModel –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ë–î –±—ã–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏
    voice_logger.debug("Validating LLM response...")
    is_valid, errors, answer = validator.validate(text_answer, db_session)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏ –æ—Ç–≤–µ—Ç –æ—Ç LLM –Ω–µ –ø—É—Å—Ç–æ–π
    if is_valid:
        voice_logger.info("LLM response is valid, executing commands...")
        added_items, updated_items, deleted_items = executor.execute(db_session, answer.response, db_user.id)
        voice_logger.info(f"Executed commands: added={len(added_items) if added_items else 0}, updated={len(updated_items) if updated_items else 0}, deleted={len(deleted_items) if deleted_items else 0}")
    else:
        voice_logger.warning(f"LLM response validation failed: {errors}")
        added_items, updated_items, deleted_items = None, None, None
    
    reply_text = get_action_result_text(is_valid, errors, answer, added_items, updated_items, deleted_items)
    
    voice_logger.info("Sending response to user")
    await message.reply(html.escape(reply_text))